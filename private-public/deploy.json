{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "organizationName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "The name of the organization behind API Management"
            }
        },
        "adminEmail": {
            "type": "string",
            "minLength": 3,
            "metadata": {
                "description": "The email of the admin"
            }
        },
        "sku": {
            "type": "string",
            "metadata": {
                "description": "Sku of the API Management"
            },
            "allowedValues": [
                "Consumption",
                "Developer",
                "Basic",
                "Standard",
                "Premium"
            ],
            "defaultValue": "Premium"
        }
    },
    "variables": {
        "VNets": [
            {
                "Name": "api-man-vnet",
                "Address Space": "10.0.0.0/20",
                "Subnet Name": "api-man",
                "Subnet Address Space": "10.0.0.0/26",
                "Is Subnet Delegated": false
            },
            {
                "Name": "private-service-vnet",
                "Address Space": "10.1.0.0/20",
                "Subnet Name": "service",
                "Subnet Address Space": "10.1.0.0/26",
                "Is Subnet Delegated": true,
                "Interface Config Name": "private-service-interface",
                "Interface IP Config": "private-service-ip-config"
            },
            {
                "Name": "private-consumer-vnet",
                "Address Space": "10.2.0.0/20",
                "Subnet Name": "consumer",
                "Subnet Address Space": "10.2.0.0/26",
                "Is Subnet Delegated": true,
                "Interface Config Name": "private-consumer-interface",
                "Interface IP Config": "private-consumer-ip-config"
            }
        ],
        "Delegation Configuration": [
            {
                "name": "DelegationService",
                "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                }
            }
        ],
        "Empty Delegation Configuration": [],
        "Logic App Key Type": {
            "keyType": "Primary"
        },
        "Public Service": "public-service",
        "Public Service Url": "public-service-url",
        "Public Service Query String": "public-service-query-string",
        "products": {
            "token": {
                "name": "token-based",
                "description": "API requires an AAD token",
                "terms": "Use at your own risks",
                "displayName": "Token based",
                "groups": [
                    "administrators",
                    "developers",
                    "guests"
                ]
            },
            "subscription": {
                "name": "subscription-based",
                "description": "API requires a subscription key",
                "terms": "Use at your own risks",
                "displayName": "Subscription based",
                "groups": [
                    "administrators",
                    "developers",
                    "guests"
                ]
            }
        },
        "apis": {
            "one": {
                "name": "one-api",
                "displayName": "one-api",
                "products": [
                    "[variables('products')['subscription']['name']]"
                ],
                "operations": {
                    "public": {
                        "name": "public"
                    }
                }
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-04-01",
            "copy": {
                "name": "VNETs",
                "count": "[length(variables('VNets'))]"
            },
            "name": "[variables('VNets')[copyIndex()]['Name']]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('VNets')[copyIndex()]['Address Space']]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('VNets')[copyIndex()]['Subnet Name']]",
                        "properties": {
                            "addressPrefix": "[variables('VNets')[copyIndex()]['Subnet Address Space']]",
                            "delegations": "[if(variables('VNets')[copyIndex()]['Is Subnet Delegated'], variables('Delegation Configuration'), variables('Empty Delegation Configuration'))]"
                        }
                    }
                ]
            },
            "resources": []
        },
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-04-01",
            "copy": {
                "name": "Peerings",
                "count": "[sub(length(variables('VNets')), 1)]"
            },
            "name": "[concat(variables('VNets')[add(copyIndex(), 1)]['Name'], '/peering-to-api-man')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNets')[0]['Name'])]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNets')[add(copyIndex(), 1)]['Name'])]"
            ],
            "properties": {
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('VNets')[0]['Name'])]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Network/networkProfiles",
            "apiVersion": "2019-04-01",
            "copy": {
                "name": "Profiles",
                "count": "[sub(length(variables('VNets')), 1)]"
            },
            "name": "[concat(variables('VNets')[add(copyIndex(), 1)]['Name'], '-profile')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNets')[add(copyIndex(), 1)]['Name'])]"
            ],
            "properties": {
                "containerNetworkInterfaceConfigurations": [
                    {
                        "name": "[variables('VNets')[add(copyIndex(), 1)]['Interface Config Name']]",
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "[variables('VNets')[add(copyIndex(), 1)]['Interface IP Config']]",
                                    "properties": {
                                        "subnet": {
                                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNets')[add(copyIndex(), 1)]['Name'], variables('VNets')[add(copyIndex(), 1)]['Subnet Name'])]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "resources": []
        },
        {
            "name": "private-service-group",
            "type": "Microsoft.ContainerInstance/containerGroups",
            "apiVersion": "2018-10-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkProfiles', concat(variables('VNets')[1]['Name'], '-profile'))]"
            ],
            "properties": {
                "containers": [
                    {
                        "name": "web-container",
                        "properties": {
                            "image": "vplauzon/get-started:part2-no-redis",
                            "ports": [
                                {
                                    "port": "80",
                                    "protocol": "Tcp"
                                }
                            ],
                            "resources": {
                                "requests": {
                                    "cpu": "1",
                                    "memoryInGB": "1"
                                }
                            }
                        }
                    }
                ],
                "osType": "Linux",
                "networkProfile": {
                    "Id": "[resourceId('Microsoft.Network/networkProfiles', concat(variables('VNets')[1]['Name'], '-profile'))]"
                },
                "restartPolicy": "Always"
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Public Service')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "intro": {
                                            "type": "string"
                                        },
                                        "number": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Response": {
                            "runAfter": {},
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "@{triggerBody()?['intro']}:  @{add(5, triggerBody()?['number'])}",
                                "statusCode": 200
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2019-01-01",
            "name": "[parameters('organizationName')]",
            "location": "[resourceGroup().location]",
            "tags": {},
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNets')[0]['Name'])]"
            ],
            "properties": {
                "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
                "hostnameConfigurations": [],
                "virtualNetworkConfiguration": {
                    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNets')[0]['Name'], variables('VNets')[0]['Subnet Name'])]"
                },
                "additionalLocations": [],
                "customProperties": {},
                "certificates": [],
                "enableClientCertificate": true,
                "virtualNetworkType": "External",
                "publisherEmail": "[parameters('adminEmail')]",
                "publisherName": "api-admin"
            },
            "sku": {
                "name": "[parameters('sku')]"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "resources": [
                {
                    "type": "properties",
                    "apiVersion": "2019-01-01",
                    "name": "[variables('Public Service Url')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', parameters('organizationName'))]",
                        "[resourceId('Microsoft.Logic/workflows', variables('Public Service'))]"
                    ],
                    "properties": {
                        "displayName": "[variables('Public Service Url')]",
                        "value": "[split(listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('Public Service')), '/triggers/manual'), '2016-10-01', variables('Logic App Key Type')).value, '?')[0]]",
                        "tags": [],
                        "secret": false
                    }
                },
                {
                    "type": "properties",
                    "apiVersion": "2019-01-01",
                    "name": "[variables('Public Service Query String')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', parameters('organizationName'))]",
                        "[resourceId('Microsoft.Logic/workflows', variables('Public Service'))]"
                    ],
                    "properties": {
                        "displayName": "[variables('Public Service Query String')]",
                        "value": "[concat('?', split(listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('Public Service')), '/triggers/manual'), '2016-10-01', variables('Logic App Key Type')).value, '?')[1])]",
                        "tags": [],
                        "secret": true
                    }
                },
                {
                    "type": "products",
                    "apiVersion": "2019-01-01",
                    "name": "[variables('products')['token']['name']]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', parameters('organizationName'))]"
                    ],
                    "properties": {
                        "description": "[variables('products')['token']['description']]",
                        "terms": "[variables('products')['token']['terms']]",
                        "subscriptionRequired": false,
                        "subscriptionsLimit": null,
                        "state": "published",
                        "displayName": "[variables('products')['token']['displayName']]"
                    },
                    "resources": []
                },
                {
                    "type": "products",
                    "apiVersion": "2019-01-01",
                    "name": "[variables('products')['subscription']['name']]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', parameters('organizationName'))]"
                    ],
                    "properties": {
                        "description": "[variables('products')['subscription']['description']]",
                        "terms": "[variables('products')['subscription']['terms']]",
                        "subscriptionRequired": true,
                        "subscriptionsLimit": null,
                        "state": "published",
                        "displayName": "[variables('products')['subscription']['displayName']]"
                    },
                    "resources": []
                },
                {
                    "type": "apis",
                    "apiVersion": "2019-01-01",
                    "name": "[variables('apis')['one']['name']]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', parameters('organizationName'))]"
                    ],
                    "properties": {
                        "displayName": "[variables('apis')['one']['displayName']]",
                        "apiRevision": "1",
                        "path": "[variables('apis')['one']['name']]",
                        "protocols": [
                            "https"
                        ],
                        "isCurrent": true
                    }
                }
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/products/groups",
            "apiVersion": "2019-01-01",
            "copy": {
                "name": "token-groups",
                "count": "[length(variables('products')['token']['groups'])]"
            },
            "name": "[concat(parameters('organizationName'), '/', variables('products')['token']['name'], '/', variables('products')['token']['groups'][copyIndex()])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('organizationName'), variables('products')['token']['name'])]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.ApiManagement/service/products/groups",
            "apiVersion": "2019-01-01",
            "copy": {
                "name": "token-groups",
                "count": "[length(variables('products')['subscription']['groups'])]"
            },
            "name": "[concat(parameters('organizationName'), '/', variables('products')['subscription']['name'], '/', variables('products')['subscription']['groups'][copyIndex()])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('organizationName'), variables('products')['subscription']['name'])]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.ApiManagement/service/products/apis",
            "apiVersion": "2019-01-01",
            "copy": {
                "name": "one-product-api",
                "count": "[length(variables('apis')['one']['products'])]"
            },
            "name": "[concat(parameters('organizationName'), '/', variables('apis')['one']['products'][copyIndex()], '/', variables('apis')['one']['name'])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('organizationName'), variables('products')['subscription']['name'])]",
                "[resourceId('Microsoft.ApiManagement/service/products', parameters('organizationName'), variables('products')['token']['name'])]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('organizationName'), variables('apis')['one']['name'])]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('organizationName'), '/', variables('apis')['one']['name'], '/', variables('apis')['one']['operations']['public']['name'])]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('organizationName'), variables('apis')['one']['name'])]"
            ],
            "properties": {
                "displayName": "public",
                "method": "GET",
                "urlTemplate": "/public",
                "templateParameters": [],
                "request": {
                    "queryParameters": [
                        {
                            "name": "intro",
                            "description": "Introduction in the response",
                            "type": "string",
                            "defaultValue": "Default introduction",
                            "required": true
                        },
                        {
                            "name": "number",
                            "description": "Number to compute with",
                            "type": "int",
                            "defaultValue": "42",
                            "required": true
                        }
                    ],
                    "headers": [],
                    "representations": []
                },
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [
                            {
                                "contentType": "text/plain",
                                "sample": "Plain old text"
                            }
                        ],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('organizationName'), '/', variables('apis')['one']['name'], '/', variables('apis')['one']['operations']['public']['name'], '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('organizationName'), variables('apis')['one']['name'], variables('apis')['one']['operations']['public']['name'])]",
                "[resourceId('Microsoft.ApiManagement/service/properties', parameters('organizationName'), variables('Public Service Url'))]",
                "[resourceId('Microsoft.ApiManagement/service/properties', parameters('organizationName'), variables('Public Service Query String'))]"
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-body>@{var body=new {intro=context.Request.OriginalUrl.Query[\"intro\"].First(), number=int.Parse(context.Request.Url.Query[\"number\"].First())};return JObject.FromObject(body).ToString();}</set-body>\r\n    <set-backend-service base-url=\"{{public-service-url}}\" />\r\n    <rewrite-uri template=\"{{public-service-query-string}}\" copy-unmatched-params=\"false\" />\r\n    <set-method>POST</set-method>\r\n    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n      <value>application/json</value>\r\n    </set-header>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        }
    ],
    "outputs": {
        "logic-url": {
            "type": "array",
            "value": "[split(listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('Public Service')), '/triggers/manual'), '2016-10-01', variables('Logic App Key Type')).value, '?')]"
        }
    }
}